<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.DemolitionMapper">
  <resultMap id="BaseResultMap" type="com.model.Demolition">
    <id column="dn_id" jdbcType="INTEGER" property="dnId" />
    <result column="pi_id" jdbcType="INTEGER" property="piId" />
    <result column="cl_id" jdbcType="INTEGER" property="clId" />
    <result column="dn_code" jdbcType="CHAR" property="dnCode" />
    <result column="pi_name" jdbcType="VARCHAR" property="piName" />
    <result column="cl_code" jdbcType="CHAR" property="clCode" />
    <result column="dn_date" jdbcType="TIMESTAMP" property="dnDate" />
    <result column="dn_name" jdbcType="VARCHAR" property="dnName" />
    <result column="dn_unit" jdbcType="VARCHAR" property="dnUnit" />
    <result column="dn_do_design" jdbcType="DOUBLE" property="dnDoDesign" />
    <result column="dn_do_change" jdbcType="DOUBLE" property="dnDoChange" />
    <result column="dn_up_design" jdbcType="DOUBLE" property="dnUpDesign" />
    <result column="dn_up_change" jdbcType="DOUBLE" property="dnUpChange" />
    <result column="dn_down_design" jdbcType="DOUBLE" property="dnDownDesign" />
    <result column="dn_down_change" jdbcType="DOUBLE" property="dnDownChange" />
    <result column="dn_info" jdbcType="VARCHAR" property="dnInfo" />
  </resultMap>
  <resultMap id="BaseResultMapExtends" type="com.model.Demolition" extends="BaseResultMap">
    <association property="partItem" javaType="com.model.PartItem"
                 select="com.mapper.PartItemMapper.selectByPrimaryKey" column="pi_id">
    </association>
    <association property="costLayer" javaType="com.model.CostLayer"
                 select="com.mapper.CostLayerMapper.selectByPrimaryKey" column="cl_id">
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Where_Clause">
    <where>
      <if test="record.dnId != null">
        dn_id = #{record.dnId,jdbcType=INTEGER}
      </if>
      <if test="record.piId != null">
        and pi_id = #{record.piId,jdbcType=INTEGER}
      </if>
      <if test="record.dnCode != null">
        and dn_code = #{record.dnCode,jdbcType=CHAR}
      </if>
      <if test="record.piName != null">
        and pi_name = #{record.piName,jdbcType=VARCHAR}
      </if>
      <if test="record.clId != null">
        and cl_id = #{record.clId,jdbcType=INTEGER}
      </if>
      <if test="record.clCode != null">
        and cl_code = #{record.clCode,jdbcType=CHAR}
      </if>
      <if test="record.dnDate != null">
        and dn_date = #{record.dnDate,jdbcType=TIMESTAMP}
      </if>
      <if test="record.dnName != null">
        and dn_name = #{record.dnName,jdbcType=VARCHAR}
      </if>
      <if test="record.dnUnit != null">
        and dn_unit = #{record.dnUnit,jdbcType=VARCHAR}
      </if>
      <if test="record.dnDoDesign != null">
        and dn_do_design = #{record.dnDoDesign,jdbcType=DOUBLE}
      </if>
      <if test="record.dnDoChange != null">
        and dn_do_change = #{record.dnDoChange,jdbcType=DOUBLE}
      </if>
      <if test="record.dnUpDesign != null">
        and dn_up_design = #{record.dnUpDesign,jdbcType=DOUBLE}
      </if>
      <if test="record.dnUpChange != null">
        and dn_up_change = #{record.dnUpChange,jdbcType=DOUBLE}
      </if>
      <if test="record.dnDownDesign != null">
        and dn_down_design = #{record.dnDownDesign,jdbcType=DOUBLE}
      </if>
      <if test="record.dnDownChange != null">
        and dn_down_change = #{record.dnDownChange,jdbcType=DOUBLE}
      </if>
      <if test="record.dnInfo != null">
        and dn_info = #{record.dnInfo,jdbcType=VARCHAR}
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Query_Clause">
    <where>
      <if test="record.dnId != null">
        dn_id like concat('%', #{record.dnId,jdbcType=INTEGER}, '%')
      </if>
      <if test="record.piId != null">
        and pi_id like concat('%', #{record.piId,jdbcType=INTEGER}, '%')
      </if>
      <if test="record.dnCode != null">
        and dn_code like concat('%', #{record.dnCode,jdbcType=CHAR}, '%')
      </if>
      <if test="record.piName != null">
        and pi_name like concat('%', #{record.piName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.clId != null">
        and cl_id like concat('%', #{record.clId,jdbcType=INTEGER}, '%')
      </if>
      <if test="record.clCode != null">
        and cl_code like concat('%', #{record.clCode,jdbcType=CHAR}, '%')
      </if>
      <if test="record.dnDate != null">
        and dn_date like concat('%', #{record.dnDate,jdbcType=TIMESTAMP}, '%')
      </if>
      <if test="record.dnName != null">
        and dn_name like concat('%', #{record.dnName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.dnUnit != null">
        and dn_unit like concat('%', #{record.dnUnit,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.dnDoDesign != null">
        and dn_do_design like concat('%', #{record.dnDoDesign,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.dnDoChange != null">
        and dn_do_change like concat('%', #{record.dnDoChange,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.dnUpDesign != null">
        and dn_up_design like concat('%', #{record.dnUpDesign,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.dnUpChange != null">
        and dn_up_change like concat('%', #{record.dnUpChange,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.dnDownDesign != null">
        and dn_down_design like concat('%', #{record.dnDownDesign,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.dnDownChange != null">
        and dn_down_change like concat('%', #{record.dnDownChange,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.dnInfo != null">
        and dn_info like concat('%', #{record.dnInfo,jdbcType=VARCHAR}, '%')
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Clause_Offset">
    <if test="_parameter.containsKey('limit') and limit != null">
      <choose>
        <when test="_parameter.containsKey('offset') and offset != null">
          order by dn_id asc limit #{offset}, #{limit};
        </when>
        <otherwise>
          order by dn_id asc limit  #{limit};
        </otherwise>
      </choose>
    </if>
  </sql>
  <sql id="Base_Column_List">
    dn_id, pi_id, cl_id, dn_code, pi_name, cl_code, dn_date, dn_name, dn_unit, dn_do_design, 
    dn_do_change, dn_up_design, dn_up_change, dn_down_design, dn_down_change, dn_info
  </sql>
  <sql id="Param_Column_List">
    <choose>
      <when test="_parameter.containsKey('fields') and fields != null">
        ${fields}
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
  </sql>
  <sql id="Param_Where_Clause_Like">
    <if test="_parameter.containsKey('field') and field != null">
      <where>
        <if test="_parameter.containsKey('value') and value != null">
          ${field} like concat('%', #{value}, '%')
        </if>
      </where>
      <if test="_parameter.containsKey('limit') and limit != null">
        <choose>
          <when test="_parameter.containsKey('offset') and offset != null">
            order by ${field} asc limit #{offset}, #{limit};
          </when>
          <otherwise>
            order by ${field} asc limit  #{limit};
          </otherwise>
        </choose>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Equal">
    <if test="_parameter.containsKey('field') and field != null">
      <where>
        <if test="_parameter.containsKey('value') and value != null">
          ${field} = #{value}
        </if>
        <if test="_parameter.containsKey('value1') and _parameter.containsKey('value2')">
          <if test="value1 != null and value2 != null">
            ${field} between #{value1} and #{value2}
          </if>
        </if>
      </where>
      <if test="_parameter.containsKey('limit') and limit != null">
        <choose>
          <when test="_parameter.containsKey('offset') and offset != null">
            order by ${field} asc limit #{offset}, #{limit};
          </when>
          <otherwise>
            order by ${field} asc limit  #{limit};
          </otherwise>
        </choose>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Sql">
    <where>
      <choose>
        <when test="_parameter.containsKey('sql') and sql != null">
          ${sql}
        </when>
        <otherwise>
          dn_id is null
        </otherwise>
      </choose>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <select id="selectByExample" parameterType="com.model.DemolitionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_demolition
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMapExtends">
    select 
    <include refid="Base_Column_List" />
    from tb_demolition
    where dn_id = #{dnId,jdbcType=INTEGER}
  </select>
  <select id="selectByMinPrimaryKey" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    where dn_id = (select min(dn_id) from tb_demolition)
  </select>
  <select id="selectByMaxPrimaryKey" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    where dn_id = (select max(dn_id) from tb_demolition)
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_demolition
    where dn_id = #{dnId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.model.DemolitionExample">
    delete from tb_demolition
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="dn_id" keyProperty="dnId" parameterType="com.model.Demolition" useGeneratedKeys="true">
    insert into tb_demolition (dn_id, pi_id, cl_id, dn_code,
      pi_name, cl_code, dn_date, 
      dn_name, dn_unit, dn_do_design, 
      dn_do_change, dn_up_design, dn_up_change, 
      dn_down_design, dn_down_change, dn_info
      )
    values (#{dnId,jdbcType=INTEGER}, #{piId,jdbcType=INTEGER}, #{clId,jdbcType=INTEGER}, #{dnCode,jdbcType=CHAR},
      #{piName,jdbcType=VARCHAR}, #{clCode,jdbcType=CHAR}, #{dnDate,jdbcType=TIMESTAMP}, 
      #{dnName,jdbcType=VARCHAR}, #{dnUnit,jdbcType=VARCHAR}, #{dnDoDesign,jdbcType=DOUBLE}, 
      #{dnDoChange,jdbcType=DOUBLE}, #{dnUpDesign,jdbcType=DOUBLE}, #{dnUpChange,jdbcType=DOUBLE}, 
      #{dnDownDesign,jdbcType=DOUBLE}, #{dnDownChange,jdbcType=DOUBLE}, #{dnInfo,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="dn_id" keyProperty="dnId" parameterType="com.model.Demolition" useGeneratedKeys="true">
    insert into tb_demolition
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="dnId != null">
        dn_id,
      </if>
      <if test="piId != null">
        pi_id,
      </if>
      <if test="clId != null">
        cl_id,
      </if>
      <if test="dnCode != null">
        dn_code,
      </if>
      <if test="piName != null">
        pi_name,
      </if>
      <if test="clCode != null">
        cl_code,
      </if>
      <if test="dnDate != null">
        dn_date,
      </if>
      <if test="dnName != null">
        dn_name,
      </if>
      <if test="dnUnit != null">
        dn_unit,
      </if>
      <if test="dnDoDesign != null">
        dn_do_design,
      </if>
      <if test="dnDoChange != null">
        dn_do_change,
      </if>
      <if test="dnUpDesign != null">
        dn_up_design,
      </if>
      <if test="dnUpChange != null">
        dn_up_change,
      </if>
      <if test="dnDownDesign != null">
        dn_down_design,
      </if>
      <if test="dnDownChange != null">
        dn_down_change,
      </if>
      <if test="dnInfo != null">
        dn_info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="dnId != null">
        #{dnId,jdbcType=INTEGER},
      </if>
      <if test="piId != null">
        #{piId,jdbcType=INTEGER},
      </if>
      <if test="clId != null">
        #{clId,jdbcType=INTEGER},
      </if>
      <if test="dnCode != null">
        #{dnCode,jdbcType=CHAR},
      </if>
      <if test="piName != null">
        #{piName,jdbcType=VARCHAR},
      </if>
      <if test="clCode != null">
        #{clCode,jdbcType=CHAR},
      </if>
      <if test="dnDate != null">
        #{dnDate,jdbcType=TIMESTAMP},
      </if>
      <if test="dnName != null">
        #{dnName,jdbcType=VARCHAR},
      </if>
      <if test="dnUnit != null">
        #{dnUnit,jdbcType=VARCHAR},
      </if>
      <if test="dnDoDesign != null">
        #{dnDoDesign,jdbcType=DOUBLE},
      </if>
      <if test="dnDoChange != null">
        #{dnDoChange,jdbcType=DOUBLE},
      </if>
      <if test="dnUpDesign != null">
        #{dnUpDesign,jdbcType=DOUBLE},
      </if>
      <if test="dnUpChange != null">
        #{dnUpChange,jdbcType=DOUBLE},
      </if>
      <if test="dnDownDesign != null">
        #{dnDownDesign,jdbcType=DOUBLE},
      </if>
      <if test="dnDownChange != null">
        #{dnDownChange,jdbcType=DOUBLE},
      </if>
      <if test="dnInfo != null">
        #{dnInfo,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.model.DemolitionExample" resultType="java.lang.Long">
    select count(*) from tb_demolition
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByModel" parameterType="com.model.Guidance" resultType="java.lang.Long">
    select count(*) from tb_demolition
    <if test="_parameter != null">
      <include refid="Model_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_demolition
    <set>
      <if test="record.dnId != null">
        dn_id = #{record.dnId,jdbcType=INTEGER},
      </if>
      <if test="record.piId != null">
        pi_id = #{record.piId,jdbcType=INTEGER},
      </if>
      <if test="record.clId != null">
        cl_id = #{record.clId,jdbcType=INTEGER},
      </if>
      <if test="record.dnCode != null">
        dn_code = #{record.dnCode,jdbcType=CHAR},
      </if>
      <if test="record.piName != null">
        pi_name = #{record.piName,jdbcType=VARCHAR},
      </if>
      <if test="record.clCode != null">
        cl_code = #{record.clCode,jdbcType=CHAR},
      </if>
      <if test="record.dnDate != null">
        dn_date = #{record.dnDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dnName != null">
        dn_name = #{record.dnName,jdbcType=VARCHAR},
      </if>
      <if test="record.dnUnit != null">
        dn_unit = #{record.dnUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.dnDoDesign != null">
        dn_do_design = #{record.dnDoDesign,jdbcType=DOUBLE},
      </if>
      <if test="record.dnDoChange != null">
        dn_do_change = #{record.dnDoChange,jdbcType=DOUBLE},
      </if>
      <if test="record.dnUpDesign != null">
        dn_up_design = #{record.dnUpDesign,jdbcType=DOUBLE},
      </if>
      <if test="record.dnUpChange != null">
        dn_up_change = #{record.dnUpChange,jdbcType=DOUBLE},
      </if>
      <if test="record.dnDownDesign != null">
        dn_down_design = #{record.dnDownDesign,jdbcType=DOUBLE},
      </if>
      <if test="record.dnDownChange != null">
        dn_down_change = #{record.dnDownChange,jdbcType=DOUBLE},
      </if>
      <if test="record.dnInfo != null">
        dn_info = #{record.dnInfo,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_demolition
    set dn_id = #{record.dnId,jdbcType=INTEGER},
      pi_id = #{record.piId,jdbcType=INTEGER},
      cl_id = #{record.clId,jdbcType=INTEGER},
      dn_code = #{record.dnCode,jdbcType=CHAR},
      pi_name = #{record.piName,jdbcType=VARCHAR},
      cl_code = #{record.clCode,jdbcType=CHAR},
      dn_date = #{record.dnDate,jdbcType=TIMESTAMP},
      dn_name = #{record.dnName,jdbcType=VARCHAR},
      dn_unit = #{record.dnUnit,jdbcType=VARCHAR},
      dn_do_design = #{record.dnDoDesign,jdbcType=DOUBLE},
      dn_do_change = #{record.dnDoChange,jdbcType=DOUBLE},
      dn_up_design = #{record.dnUpDesign,jdbcType=DOUBLE},
      dn_up_change = #{record.dnUpChange,jdbcType=DOUBLE},
      dn_down_design = #{record.dnDownDesign,jdbcType=DOUBLE},
      dn_down_change = #{record.dnDownChange,jdbcType=DOUBLE},
      dn_info = #{record.dnInfo,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.Demolition">
    update tb_demolition
    <set>
      <if test="piId != null">
        pi_id = #{piId,jdbcType=INTEGER},
      </if>
      <if test="clId != null">
        cl_id = #{clId,jdbcType=INTEGER},
      </if>
      <if test="dnCode != null">
        dn_code = #{dnCode,jdbcType=CHAR},
      </if>
      <if test="piName != null">
        pi_name = #{piName,jdbcType=VARCHAR},
      </if>
      <if test="clCode != null">
        cl_code = #{clCode,jdbcType=CHAR},
      </if>
      <if test="dnDate != null">
        dn_date = #{dnDate,jdbcType=TIMESTAMP},
      </if>
      <if test="dnName != null">
        dn_name = #{dnName,jdbcType=VARCHAR},
      </if>
      <if test="dnUnit != null">
        dn_unit = #{dnUnit,jdbcType=VARCHAR},
      </if>
      <if test="dnDoDesign != null">
        dn_do_design = #{dnDoDesign,jdbcType=DOUBLE},
      </if>
      <if test="dnDoChange != null">
        dn_do_change = #{dnDoChange,jdbcType=DOUBLE},
      </if>
      <if test="dnUpDesign != null">
        dn_up_design = #{dnUpDesign,jdbcType=DOUBLE},
      </if>
      <if test="dnUpChange != null">
        dn_up_change = #{dnUpChange,jdbcType=DOUBLE},
      </if>
      <if test="dnDownDesign != null">
        dn_down_design = #{dnDownDesign,jdbcType=DOUBLE},
      </if>
      <if test="dnDownChange != null">
        dn_down_change = #{dnDownChange,jdbcType=DOUBLE},
      </if>
      <if test="dnInfo != null">
        dn_info = #{dnInfo,jdbcType=VARCHAR},
      </if>
    </set>
    where dn_id = #{dnId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.model.Demolition">
    update tb_demolition
    set pi_id = #{piId,jdbcType=INTEGER},
      cl_id = #{clId,jdbcType=INTEGER},
      dn_code = #{dnCode,jdbcType=CHAR},
      pi_name = #{piName,jdbcType=VARCHAR},
      cl_code = #{clCode,jdbcType=CHAR},
      dn_date = #{dnDate,jdbcType=TIMESTAMP},
      dn_name = #{dnName,jdbcType=VARCHAR},
      dn_unit = #{dnUnit,jdbcType=VARCHAR},
      dn_do_design = #{dnDoDesign,jdbcType=DOUBLE},
      dn_do_change = #{dnDoChange,jdbcType=DOUBLE},
      dn_up_design = #{dnUpDesign,jdbcType=DOUBLE},
      dn_up_change = #{dnUpChange,jdbcType=DOUBLE},
      dn_down_design = #{dnDownDesign,jdbcType=DOUBLE},
      dn_down_change = #{dnDownChange,jdbcType=DOUBLE},
      dn_info = #{dnInfo,jdbcType=VARCHAR}
    where dn_id = #{dnId,jdbcType=INTEGER}
  </update>
  <select id="selectAllModel" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    <include refid="Model_Clause_Offset" />
  </select>
  <select id="countAllModel" resultType="java.lang.Long">
    select count(*) from tb_demolition
  </select>
  <select id="selectByParam" parameterType="map" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    <include refid="Model_Where_Clause" />
  </select>
  <select id="countBySelectParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from tb_demolition
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryByParam" parameterType="map" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    <include refid="Model_Query_Clause" />
  </select>
  <select id="countByQueryParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from tb_demolition
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectByCondition" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="countBySelectCondition" resultType="java.lang.Long">
    select count(*) from tb_demolition
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryByCondition" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="countByQueryCondition" resultType="java.lang.Long">
    select count(*) from tb_demolition
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_demolition
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_demolition
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_demolition
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_demolition
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Base_Column_List" />
    from tb_demolition
    <include refid="Param_Where_Clause_Sql" />
  </select>
  <select id="selectFieldsBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Param_Column_List" />
    from tb_demolition
    <include refid="Param_Where_Clause_Sql" />
  </select>
</mapper>