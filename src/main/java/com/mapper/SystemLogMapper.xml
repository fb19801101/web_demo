<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.SystemLogMapper">
  <resultMap id="BaseResultMap" type="com.model.SystemLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="method" jdbcType="VARCHAR" property="method" />
    <result column="type" jdbcType="BIGINT" property="type" />
    <result column="request" jdbcType="VARCHAR" property="request" />
    <result column="code" jdbcType="CHAR" property="code" />
    <result column="exception" jdbcType="VARCHAR" property="exception" />
    <result column="params" jdbcType="VARCHAR" property="params" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="date" jdbcType="TIMESTAMP" property="date" />
    <result column="info" jdbcType="VARCHAR" property="info" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Where_Clause">
    <where>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER}
      </if>
      <if test="record.description != null">
        and description = #{record.description,jdbcType=VARCHAR}
      </if>
      <if test="record.method != null">
        and `method` = #{record.method,jdbcType=VARCHAR}
      </if>
      <if test="record.type != null">
        and `type` = #{record.type,jdbcType=BIGINT},
      </if>
      <if test="record.request != null">
        and request = #{record.request,jdbcType=VARCHAR}
      </if>
      <if test="record.code != null">
        and code = #{record.code,jdbcType=CHAR}
      </if>
      <if test="record.exception != null">
        and `exception` = #{record.exception,jdbcType=VARCHAR}
      </if>
      <if test="record.params != null">
        and params = #{record.params,jdbcType=VARCHAR}
      </if>
      <if test="record.author != null">
        and author = #{record.author,jdbcType=VARCHAR}
      </if>
      <if test="record.date != null">
        and `date` = #{record.date,jdbcType=TIMESTAMP}
      </if>
      <if test="record.info != null">
        info = #{record.info,jdbcType=VARCHAR}
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Query_Clause">
    <where>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER}
      </if>
      <if test="record.description != null">
        and description = #{record.description,jdbcType=VARCHAR}
      </if>
      <if test="record.method != null">
        and `method` like concat('%', #{record.method,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.type != null">
        and `type` like concat('%', #{record.type,jdbcType=BIGINT}, '%'),
      </if>
      <if test="record.request != null">
        and request like concat('%', #{record.request,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.code != null">
        and code like concat('%', #{record.code,jdbcType=CHAR}, '%')
      </if>
      <if test="record.exception != null">
        and `exception` like concat('%', #{record.exception,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.params != null">
        and params like concat('%', #{record.params,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.author != null">
        and author like concat('%', #{record.author,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.date != null">
        and `date` like concat('%', #{record.date,jdbcType=TIMESTAMP}, '%')
      </if>
      <if test="record.info != null">
        info like concat('%', #{record.info,jdbcType=VARCHAR}, '%')
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Clause_Offset">
    <if test="_parameter != null and _parameter.containsKey('limit') and limit != null">
      <choose>
        <when test="_parameter.containsKey('offset') and offset != null">
          order by id asc limit #{offset}, #{limit};
        </when>
        <otherwise>
          order by id asc limit  #{limit};
        </otherwise>
      </choose>
    </if>
  </sql>
  <sql id="Base_Column_List">
    id, description, `method`, `type`, request, code, `exception`, params, author, `date`, 
    info
  </sql>
  <sql id="Param_Column_List">
    <choose>
      <when test="_parameter.containsKey('fields') and fields != null">
        ${fields}
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
  </sql>
  <sql id="Param_Where_Clause_Like">
    <if test="_parameter != null and _parameter.containsKey('field') and field != null">
      <where>
        <if test="_parameter.containsKey('value') and value != null">
          ${field} like concat('%', #{value}, '%')
        </if>
      </where>
      <if test="_parameter.containsKey('limit') and limit != null">
        <choose>
          <when test="_parameter.containsKey('offset') and offset != null">
            order by ${field} asc limit #{offset}, #{limit};
          </when>
          <otherwise>
            order by ${field} asc limit  #{limit};
          </otherwise>
        </choose>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Equal">
    <if test="_parameter != null and _parameter.containsKey('field') and field != null">
      <where>
        <if test="_parameter.containsKey('value') and value != null">
          ${field} = #{value}
        </if>
        <if test="_parameter.containsKey('value1') and _parameter.containsKey('value2')">
          <if test="value1 != null and value2 != null">
            ${field} between #{value1} and #{value2}
          </if>
        </if>
      </where>
      <if test="_parameter.containsKey('limit') and limit != null">
        <choose>
          <when test="_parameter.containsKey('offset') and offset != null">
            order by ${field} asc limit #{offset}, #{limit};
          </when>
          <otherwise>
            order by ${field} asc limit  #{limit};
          </otherwise>
        </choose>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Sql">
    <where>
      <choose>
        <when test="_parameter != null and _parameter.containsKey('sql') and sql != null">
          ${sql}
        </when>
        <otherwise>
          id is null
        </otherwise>
      </choose>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <select id="selectByExample" parameterType="com.model.SystemLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_systemlog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_systemlog
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByMinPrimaryKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    where id = (select min(id) from tb_systemlog)
  </select>
  <select id="selectByMaxPrimaryKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    where id = (select max(id) from tb_systemlog)
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_systemlog
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.model.SystemLogExample">
    delete from tb_systemlog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.model.SystemLog" useGeneratedKeys="true">
    insert into tb_systemlog (id, description, `method`, `type`,
      request, code, `exception`, 
      params, author, `date`, 
      info)
    values (#{type,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR}, #{method,jdbcType=VARCHAR}, #{type,jdbcType=BIGINT},
      #{request,jdbcType=VARCHAR}, #{code,jdbcType=CHAR}, #{exception,jdbcType=VARCHAR}, 
      #{params,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, #{date,jdbcType=TIMESTAMP}, 
      #{info,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.model.SystemLog" useGeneratedKeys="true">
    insert into tb_systemlog
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="method != null">
        `method`,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="request != null">
        request,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="exception != null">
        `exception`,
      </if>
      <if test="params != null">
        params,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="date != null">
        `date`,
      </if>
      <if test="info != null">
        info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        #{method,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=BIGINT},
      </if>
      <if test="request != null">
        #{request,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=CHAR},
      </if>
      <if test="exception != null">
        #{exception,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        #{params,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="info != null">
        #{info,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.model.SystemLogExample" resultType="java.lang.Long">
    select count(*) from tb_systemlog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByModel" parameterType="com.model.Guidance" resultType="java.lang.Long">
    select count(*) from tb_systemlog
    <if test="_parameter != null">
      <include refid="Model_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_systemlog
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.method != null">
        `method` = #{record.method,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=BIGINT},
      </if>
      <if test="record.request != null">
        request = #{record.request,jdbcType=VARCHAR},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=CHAR},
      </if>
      <if test="record.exception != null">
        `exception` = #{record.exception,jdbcType=VARCHAR},
      </if>
      <if test="record.params != null">
        params = #{record.params,jdbcType=VARCHAR},
      </if>
      <if test="record.author != null">
        author = #{record.author,jdbcType=VARCHAR},
      </if>
      <if test="record.date != null">
        `date` = #{record.date,jdbcType=TIMESTAMP},
      </if>
      <if test="record.info != null">
        info = #{record.info,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_systemlog
    set id = #{record.id,jdbcType=INTEGER},
      description = #{record.description,jdbcType=VARCHAR},
      `method` = #{record.method,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=BIGINT},
      request = #{record.request,jdbcType=VARCHAR},
      code = #{record.code,jdbcType=CHAR},
      `exception` = #{record.exception,jdbcType=VARCHAR},
      params = #{record.params,jdbcType=VARCHAR},
      author = #{record.author,jdbcType=VARCHAR},
      `date` = #{record.date,jdbcType=TIMESTAMP},
      info = #{record.info,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.SystemLog">
    update tb_systemlog
    <set>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        `method` = #{method,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=BIGINT},
      </if>
      <if test="request != null">
        request = #{request,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=CHAR},
      </if>
      <if test="exception != null">
        `exception` = #{exception,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        params = #{params,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        `date` = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="info != null">
        info = #{info,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.model.SystemLog">
    update tb_systemlog
    set description = #{description,jdbcType=VARCHAR},
      `method` = #{method,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=BIGINT},
      request = #{request,jdbcType=VARCHAR},
      code = #{code,jdbcType=CHAR},
      `exception` = #{exception,jdbcType=VARCHAR},
      params = #{params,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      `date` = #{date,jdbcType=TIMESTAMP},
      info = #{info,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectAllModel" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    <include refid="Model_Clause_Offset" />
  </select>
  <select id="countAllModel" resultType="java.lang.Long">
    select count(*) from tb_systemlog
  </select>
  <select id="selectByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    <include refid="Model_Where_Clause" />
  </select>
  <select id="countBySelectParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from tb_systemlog
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    <include refid="Model_Query_Clause" />
  </select>
  <select id="countByQueryParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from tb_systemlog
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectByCondition" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="countBySelectCondition" resultType="java.lang.Long">
    select count(*) from tb_systemlog
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryByCondition" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="countByQueryCondition" resultType="java.lang.Long">
    select count(*) from tb_systemlog
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_systemlog
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_systemlog
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_systemlog
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_systemlog
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Base_Column_List" />
    from tb_systemlog
    <include refid="Param_Where_Clause_Sql" />
  </select>
  <select id="selectFieldsBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Param_Column_List" />
    from tb_systemlog
    <include refid="Param_Where_Clause_Sql" />
  </select>
</mapper>