<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 开启注解模式 -->
	<context:annotation-config/>

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.mapper"/>

	<!-- 解析db.properties 因为 db.properties里面有username=root 如果在下面的数据源中使用${username}它取到的是当前系统的登陆名
		如果要使用db.properties里面的username必须加system-properties-mode="FALLBACK"这个属性 -->
	<!-- 让spring 去读取指定路径下的资源文件 注：maven下的pom.xml已经加载了资源文件了 -->
	<!--<context:property-placeholder location="classpath:db.properties" system-properties-mode="FALLBACK" />-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:db.properties"/>
	</bean>

	<!-- 第二种方式：加载多个properties文件
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:common.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>
    -->

	<!-- 配置数据源 -->
	<bean id="dataSource_first"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url_first}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 配置德鲁伊连接池
	<bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" abstract="true">
		<property name="maxActive" value="${jdbc.maxActive}"/>
		<property name="initialSize" value="${jdbc.initialSize}"/>
		<property name="maxWait" value="${jdbc.maxWait}"/>
		<property name="minIdle" value="${jdbc.minIdle}"/>
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}"/>
		<property name="numTestsPerEvictionRun" value="${jdbc.numTestsPerEvictionRun}"/>
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
		<property name="testOnReturn" value="${jdbc.testOnReturn}"/>
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"/>
	</bean>
	-->

	<bean id="dataSource_second"
		  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url_second}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 切换数据库的自定义类 -->
	<bean id="multipleDataSource" class="com.daoutil.MultipleDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="project" value-ref="dataSource_first"></entry>
				<entry key="finance" value-ref="dataSource_second"></entry>
			</map>
		</property>
		<!-- 默认使用url_first数据库 -->
		<property name="defaultTargetDataSource" ref="dataSource_first"></property>
	</bean>

	<bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="project">project</prop>
				<prop key="finance">finance</prop>
			</props>
		</property>
	</bean>

	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
		<property name="properties" ref="vendorProperties" />
	</bean>

	<!-- 配置sqlSessinoFactory -->
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource"/>
		<!--mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml"/>
		<!-- 指定实体类包 -->
		<property name="typeAliasesPackage" value="com.model"/>
		<!--扫描 XXXmapper.xml映射文件,配置扫描的路径 这个不配置也可以，但是不配置的话，下面dao和xxxMapper.xml必须放在同一个包下面 -->
		<property name="mapperLocations" value="classpath:com/mapper/*Mapper.xml"/>
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>

	<!--配置DAO所在spring会自动查找下面的类-->
	<!-- Mapper接口所在包名，Spring会自动查找之中的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 以下的配置只能指向一个包 如果配置多个呢 就在包的中间加, -->
		<!-- <property name="basePackage" value="com.ssm.dao,com.ssm.mapper"
			/> -->
		<property name="basePackage" value="com.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
</beans>